/**
 * Page Template with GSAP + Lenis
 * 
 * Copy this template to create new animated pages
 */

'use client';

import { useEffect, useRef } from 'react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

// Register ScrollTrigger
if (typeof window !== 'undefined') {
  gsap.registerPlugin(ScrollTrigger);
}

export default function AnimatedPage() {
  // Create refs for elements you want to animate
  const heroRef = useRef<HTMLDivElement>(null);
  const section1Ref = useRef<HTMLDivElement>(null);
  const section2Ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Hero animation (on page load)
    if (heroRef.current) {
      gsap.from(heroRef.current.children, {
        y: 100,
        opacity: 0,
        duration: 1,
        stagger: 0.2,
        ease: 'power3.out',
      });
    }

    // Section 1 - Fade in on scroll
    if (section1Ref.current) {
      gsap.fromTo(
        section1Ref.current,
        { opacity: 0, y: 100 },
        {
          opacity: 1,
          y: 0,
          scrollTrigger: {
            trigger: section1Ref.current,
            start: 'top 80%',
            end: 'top 50%',
            scrub: true,
            // markers: true, // Uncomment for debugging
          },
        }
      );
    }

    // Section 2 - Scale on scroll
    if (section2Ref.current) {
      gsap.fromTo(
        section2Ref.current,
        { scale: 0.8 },
        {
          scale: 1,
          scrollTrigger: {
            trigger: section2Ref.current,
            start: 'top 80%',
            end: 'top 50%',
            scrub: true,
          },
        }
      );
    }

    // Cleanup function
    return () => {
      const triggers = ScrollTrigger.getAll();
      for (const trigger of triggers) {
        trigger.kill();
      }
    };
  }, []);

  return (
    <div className="min-h-screen bg-white dark:bg-black">
      {/* Hero Section */}
      <section className="min-h-screen flex items-center justify-center px-8">
        <div ref={heroRef} className="text-center space-y-8">
          <h1 className="text-6xl font-bold text-black dark:text-white">
            Your Page Title
          </h1>
          <p className="text-2xl text-gray-600 dark:text-gray-400">
            Your subtitle here
          </p>
        </div>
      </section>

      {/* Section 1 - Fade In */}
      <section className="min-h-screen flex items-center justify-center px-8">
        <div
          ref={section1Ref}
          className="max-w-2xl bg-blue-500 p-16 rounded-2xl text-white"
        >
          <h2 className="text-4xl font-bold mb-4">Section 1</h2>
          <p className="text-xl">This section fades in as you scroll</p>
        </div>
      </section>

      {/* Section 2 - Scale */}
      <section className="min-h-screen flex items-center justify-center px-8">
        <div
          ref={section2Ref}
          className="max-w-2xl bg-green-500 p-16 rounded-2xl text-white"
        >
          <h2 className="text-4xl font-bold mb-4">Section 2</h2>
          <p className="text-xl">This section scales up as you scroll</p>
        </div>
      </section>

      {/* Footer */}
      <footer className="py-16 text-center text-gray-500">
        <p>Your footer content</p>
      </footer>
    </div>
  );
}

/**
 * Common ScrollTrigger Patterns:
 * 
 * 1. Fade In:
 * gsap.fromTo(element,
 *   { opacity: 0, y: 50 },
 *   { opacity: 1, y: 0, scrollTrigger: { trigger: element, start: 'top 80%', scrub: true } }
 * )
 * 
 * 2. Parallax:
 * gsap.to(element, {
 *   y: 100,
 *   scrollTrigger: { trigger: element, start: 'top bottom', end: 'bottom top', scrub: true }
 * })
 * 
 * 3. Pin:
 * ScrollTrigger.create({
 *   trigger: element,
 *   pin: true,
 *   start: 'top top',
 *   end: '+=500'
 * })
 * 
 * 4. Stagger:
 * gsap.from(elements, {
 *   y: 50,
 *   opacity: 0,
 *   stagger: 0.1,
 *   scrollTrigger: { trigger: container, start: 'top 70%', scrub: true }
 * })
 * 
 * 5. Timeline:
 * const tl = gsap.timeline({
 *   scrollTrigger: { trigger: element, start: 'top top', scrub: true }
 * })
 * tl.to(el1, { x: 100 })
 *   .to(el2, { y: 100 }, '<')
 *   .to(el3, { rotation: 360 })
 */
